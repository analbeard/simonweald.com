// def greenColor = "#00FF00"
// def yellowColor = "#FFFF00"
// def redColor = "#f44242"

// def buildNotify(buildStatus) {
//     // build status of null means successful
//     buildStatus =  buildStatus ?: 'SUCCESSFUL'

//     // Override default values based on build status
//     if (buildStatus == 'STARTED') {
//       colorCode = yellowColor
//     } else if (buildStatus == 'SUCCESSFUL') {
//       colorCode = greenColor
//     } else {
//       colorCode = redColor
//     }
//     slackSend (color: colorCode, message: "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
// }

pipeline {
    agent any

    // currentBuild.result = "SUCCESS"

    environment {
        REGISTRY_CREDENTIALS = credentials('registry-analbeard-com')
        REGISTRY_URL  = 'registry.analbeard.com'
        SHORT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
    }

    stages {
        stage ("Collect static files with Hugo") {
            steps {
                sh '''
                    cd site
                    hugo
                '''
            }
        }
        stage ("Packer build") {
            steps {
                sh 'packer build build.json'
            }
            post {
                success {
                    sh "docker tag $REGISTRY_URL/website/simonweald:$SHORT_COMMIT $REGISTRY_URL/website/simonweald:latest"
                }
            }
        }
        stage ("Run tests with Goss") {
            steps {
                sh "dgoss run $REGISTRY_URL/website/simonweald:$SHORT_COMMIT"
            }
            post {
                success {
                    withDockerRegistry([ credentialsId: "registry-analbeard-com", url: "https://registry.analbeard.com/" ]) {
                        sh "docker push $REGISTRY_URL/website/simonweald:$SHORT_COMMIT"
                        sh "docker push $REGISTRY_URL/website/simonweald:latest"
                    }
                }
            }
        }
        stage ("deploy new image to Kubernetes") {
            steps {
                withKubeConfig(caCertificate: 'wealdaa-kube-ca-cert', credentialsId: 'wealdaa-kube-user-cert', serverUrl: 'https://wealdaa33.miniserver.com:6443') {
                    sh "kubectl set image deployment/simonweald-com -n shw front-end=$REGISTRY_URL/website/simonweald:$SHORT_COMMIT"
                }
            }
        }
    }
    post {
        always {
            sh 'rm -rf site/public'
            sh "docker rmi $REGISTRY_URL/website/simonweald:$SHORT_COMMIT"
            sh "docker rmi $REGISTRY_URL/website/simonweald:latest"
        }
    }
}
